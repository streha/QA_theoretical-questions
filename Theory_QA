1. Что подразумевается под тестовой средой?
Существует несколько сред:
- среда разработки (development environment);
- среда тестирования (test environment);
- интеграционная среда (integration environment);
- превью среда (preview, preprod environment);
- продакшн среда (production environment).

Тестовая среда (test environment) - это настройка программного и аппаратного обеспечения для тестирования. Испытательный стенд или тестовая среда настраиваются 
в соответствии с требованиями тестируемого приложения. Среда тестирования состоит из элементов, которые поддерживают выполнение теста с настроенным программным
обеспечением, оборудованием и сетью. Конфигурация тестовой среды должна имитировать производственную среду для выявления любых проблем, связанных с окружающей 
средой / конфигурацией. Испытательный стенд (Test Bed) – более глобальная сущность и включает в себя operating system, configuration management for the products, 
hardware, network topology и т. д.  Настраиваются в соответствии с требованиями тестируемого приложения. В некоторых случаях испытательный стенд может представлять 
собой комбинацию тестовой среды и тестовых данных, которые он использует. Настройка правильной среды тестирования гарантирует успех тестирования ПО. Любые недостатки
в этом процессе могут привести к дополнительным затратам и времени для клиента.


2. В чем отличие build от release?
Build - это версия программного обеспечения, которую команда разработчиков передает команде тестирования для целей тестирования, а Release - это версия программного обеспечения, 
которое команда тестирования передает клиенту.


3. Основные фазы тестирования?
- Pre-Alpha: ПО является прототипом. Пользовательский интерфейс завершен. Но не все функции завершены. На данном этапе ПО не публикуется. 
- Alpha: является ранней версией программного продукта. Цель - вовлечь клиента в процесс разработки. Хороший Альфа-тест должен иметь четко определенный план тестирования 
с комплексными тестовыми примерами. Это дает лучшее представление о надежности программного обеспечения на ранних стадиях. В некоторых случаях тестирование может быть 
передано на аутсорс. 
- Beta: ПО стабильно и выпускается для ограниченной пользовательской базы. Цель состоит в том, чтобы получить отзывы клиентов о продукте и внести соответствующие изменения в ПО. 
- Release Candidate (RC): основываясь на отзывах Beta Test, вы вносите изменения в ПО и хотите проверить исправления ошибок. На этом этапе вы не хотите вносить радикальные изменения в функциональность, а просто проверяете наличие ошибок. RC также выпущен для общественности 
- Release: Все работает, ПО выпущено для общественности.


4. Что такое импакт анализ (Impact Analysis)?
Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой
функциональности, а также определить, насколько значительно они были затронуты. Затронутые области требуют большего внимания во время проведения регрессионного 
тестирования. 
Импакт анализ может быть полезным в следующих случаях:
- есть изменения в требованиях;
- получен запрос на внесение изменений в продукт;
- ожидается внедрение нового модуля или функциональности в существующий продукт;
- каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.


5. Критерии выбора тестов?

Требования к идеальному критерию тестирования:

- Критерий должен быть достаточным, т.е. показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы.
- Критерий должен быть полным, т.е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку.
- Критерий должен быть надежным, т.е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы.
- Критерий должен быть легко проверяемым, например вычисляемым на тестах.

Для нетривиальных классов программ в общем случае не существует полного и надежного критерия, зависящего от программ или спецификаций. Поэтому мы стремимся к 
идеальному общему критерию через реальные частные. Классы критериев:

Структурные критерии используют информацию о структуре программы (критерии так называемого "белого ящика").
Функциональные критерии формулируются в описании требований к программному изделию ( критерии так называемого "черного ящика" ).
Критерии стохастического тестирования формулируются в терминах проверки наличия заданных свойств у тестируемого приложения, средствами проверки некоторой 
статистической гипотезы.
Мутационные критерии ориентированы на проверку свойств программного изделия на основе подхода Монте-Карло.

6. Принципы тестирования
- Принцип 1 — Тестирование демонстрирует наличие дефектов (Testing shows presence of defects).
Тестирование только снижает вероятность наличия дефектов, которые находятся в программном обеспечении, но не гарантирует их отсутствия. Тестирование может показать, что 
дефекты присутствуют, но не может доказать, что дефектов нет. Сколько бы успешных тестов вы не провели, вы не можете утверждать, что нет таких тестов, которые не 
нашли бы ошибку. Но если мы нашли хотя бы один дефект, мы уже можем утверждать, что в данном ПО присутствуют дефекты.

- Принцип 2 — Исчерпывающее тестирование невозможно (Exhaustive testing is impossible).
Полное тестирование с использованием всех входных комбинаций данных, результатов и предусловий физически невыполнимо (исключение — тривиальные случаи).
Вместо попыток «протестировать все» нам нужен некий подход к тестированию (стратегия), который обеспечит правильный объем тестирования для данного проекта, данных 
заказчиков (и других заинтересованных лиц) и данного продукта. При определении, какой объем тестирования достаточен, необходимо учитывать уровень риска,
включая технические риски и риски, связанные с бизнесом, и такие ограничения проекта как время и бюджет. Оценка и управление рисками – одна из наиболее важных активностей
в любом проекте. 

- Принцип 3 — Раннее тестирование (Early testing).
Следует начинать тестирование на ранних стадиях жизненного цикла разработки ПО, чтобы найти дефекты как можно раньше. Этот принцип связан с понятием «цена дефекта»
(cost of defect). Цена дефекта существенно растет на протяжении жизненного цикла разработки ПО. Чем раньше обнаружен дефект, тем быстрее, проще и дешевле его исправить.
Дефект, найденный в требованиях, обходится дешевле всего. Еще одно важное преимущество раннего тестирования – экономия времени. Тестовые активности могут начинаться еще
до того, как написана первая строчка кода. По мере того, как готовятся требования и спецификации, тестировщики могут приступать к разработке и ревью тест-кейсов.
И когда появится первая тестовая версия, можно будет сразу приступать к выполнению тестов.

- Принцип 4 — Скопление дефектов (Defects clustering).
Большая часть дефектов находится в ограниченном количестве модулей. Небольшое количество модулей содержит большинство дефектов, обнаруженных на этапе предрелизного
тестирования, или же демонстрируют наибольшее количество отказов на этапе эксплуатации. Многие тестировщики наблюдали такой эффект – дефекты «кучкуются». Это может происходить
потому, что определенная область кода особенно сложна и запутана, или потому, что внесение изменений производит «эффект домино». Это знание часто используется для оценки 
рисков при планировании тестов – тестировщики фокусируются на известных «проблемных зонах». Также полезно проводить анализ первопричин (root cause analysis), чтобы 
предотвратить повторное появление дефектов, обнаружить причины возникновения скоплений дефектов и спрогнозировать потенциальные скопления дефектов в будущем.

- Принцип 5 — Парадокс пестицида (Pesticide paradox).
Если повторять те же тестовые сценарии снова и снова, в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Если повторять те же тесты снова и снова, 
в какой-то момент этот набор тестов перестанет выявлять новые дефекты. Повторное применение тех же тестов и тех же методик приводит к тому, что в продукте остаются
именно те дефекты, против которых эти тесты и эти методики неэффективны. Чтобы преодолеть «парадокс пестицидов», необходимо регулярно пересматривать существующие 
тест-кейсы и создавать новые, разнообразные тесты, которые будут выполняться на различных частях системы. (Этот термин около 30 лет назад придумал американский инженер 
Борис Бейзер. Суть данного эффекта состоит в том, что многократное применение одинаковых методов со временем становится неэффективным, так как выжившие вредители 
приобретают иммунитет).

- Принцип 6 — Тестирование зависит от контекста (Testing is context depending). 
Тестирование проводится по-разному в зависимости от контекста. Например, программное обеспечение, в котором критически важна безопасность, тестируется иначе, 
чем новостной портал. Этот принцип тесно связан с понятием риска. Что такое риск? Риск – это потенциальная проблема. У риска есть вероятность (likelihood) – она всегда
выше 0 и ниже 100% – и есть влияние (impact) – те негативные последствия, которых мы опасаемся. Анализируя риски, мы всегда взвешиваем эти два аспекта: вероятность и влияние.
То же можно сказать и о мире ПО: разные системы связаны с различными уровнями риска, влияние того или иного дефекта также сильно варьируется. Одни проблемы 
довольно тривиальны, другие могут дорого обойтись и привести к большим потерям денег, времени, деловой репутации, а в некоторых случаях даже привести к травмам и смерти.
Уровень риска влияет на выбор методологий, техник и типов тестирования.

- Принцип 7 — Заблуждение об отсутствии ошибок (Absence-of-errors fallacy). 
Отсутствие найденных дефектов при тестировании не всегда означает готовность продукта к релизу. Система должна быть удобна пользователю в использовании и удовлетворять 
его ожиданиям и потребностям. Нахождение и исправление дефектов бесполезно, если построенная система неудобна для использования и не соответствует нуждам и ожиданиям 
пользователей. Заказчики ПО – люди и организации, которые покупают и используют его, чтобы выполнять свои повседневные задачи – на самом деле совершенно не интересуются 
дефектами и их количеством, кроме тех случаев, когда они непосредственно сталкиваются с нестабильностью продукта. Им также неинтересно, насколько ПО соответствует
формальным требованиям, которые были задокументированы. Пользователи ПО более заинтересованы в том, чтобы оно помогало им эффективно выполнять задачи. ПО должно отвечать
их потребностям, и именно с этой точки зрения они его оценивают.
Даже если вы выполнили все тесты и ошибок не обнаружили, это еще не гарантия того, что ПО будет соответствовать нуждам и ожиданиям пользователей.
Иначе говоря, верификация != валидация.

- * Принцип 8 —  GIGO.
В компьютерной науке «garbage in – garbage out» (GIGO) — это концепция, в которой ошибочные или бессмысленные входные данные создают бессмысленный вывод или «мусор», т.е.
при неверных входящих данных будут получены неверные результаты, даже если сам по себе алгоритм правилен. (В тестировании такие случаи иногда создают намеренно, но 
я добавил этот принцип в общий список для того, чтобы подчеркнуть важность подготовки качественных тестовых данных, положительные они или отрицательные).


7. Что такое независимое тестирование?
Тестирование по уровням независимости:

- Программист тестирует свой код (Смысл - создатель никогда не может быть хорошим критиком своей собственной работы. Программист знает свой код от и до. 
Их цель - создать продукт и отправить его в кратчайшие сроки. Вместо того, чтобы искать ошибки со всех возможных точек зрения, они будут искушены найти способы обойти
найденные ошибки. )

- Тестирование проводится другим программистом в организации (Это может быть какой-то другой программист, который участвует в некоторых других проектах. Это дает определенный
уровень независимости.)

- Внутренняя команда тестирования 

- Независимая организация тестирования (Независимые тестирующие организации изучат все аспекты вашей продукции. Они работают с мышлением поиска недостатков и ошибок. Они не 
будут использовать ярлыки в процессе тестирования. И поскольку они не были частью процесса разработки, они будут проводить тесты на нейтральной основе, чтобы прежние
интересы не мешали процессу тестирования. Почти все сторонние тестирующие организации предоставят вам подробные отчеты об ошибках и предложат корректирующие меры.)


8. Что такое тестирование со сдвигом влево? (Shift left testing)
В попытке перенести тестирование на более ранний этап жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в схеме
жизненного цикла разработки ПО. По возможности, тестирование должно проводиться с самого начала фазы проектирования, чтобы построить соответствующую стратегию тестирования.
Проще говоря, это подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла.


9. Почему тестирование делится на отдельные этапы?

- Каждый этап испытаний имеет свое назначение 
- Проще управлять поэтапно 
- Мы можем запустить разные тесты в разных средах 
- Производительность и качество тестирования улучшаются с помощью поэтапного тестирования

10. Какие есть этапы тестирования?

11. Как вы тестируете продукт, если требования еще не зафиксированы?

12. Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?

13. Что подразумевается под тестовыми данными? 


14. Что такое бета-тестирование?
Бета-тестирование — (англ. beta testing) — интенсивное использование почти готовой версии продукта (как правило, программного или аппаратного обеспечения) 
с целью выявления максимального числа ошибок в его работе для их последующего устранения перед окончательным выходом продукта на рынок, к массовому потребителю.Главная цель — 
получить отзывы клиентов о продукте и внести соответствующие изменения. 
В отличие от альфа-тестирования, проводимого силами штатных разработчиков или тестировщиков, бета-тестирование предполагает
привлечение добровольцев из числа обычных будущих пользователей продукта, которым доступна предварительная версия продукта (так называемая бета-версия). Такими добровольцами 
(их называют бета-тестерами) часто движет любопытство к новому продукту — любопытство, ради удовлетворения которого они вполне согласны мириться с возможностью испытать
последствия ещё не найденных (а потому и не исправленных) ошибок. Кроме любопытства, мотивация может быть обусловлена желанием повлиять на процесс разработки и в 
итоге получать более удовлетворяющий их нужды продукт и многим другим.

Кроме того, открытие бета-тестирования может использоваться как часть стратегии продвижения продукта на рынок (например, бесплатная раздача бета-версий позволяет 
привлечь широкое внимание потребителей к окончательной дорогостоящей версии продукта), а также для получения предварительных отзывов о нём от широкого круга будущих
пользователей. Бета-версия не является финальной версией продукта, поэтому разработчик не гарантирует полного отсутствия ошибок, которые могут нарушить работу компьютера 
и/или привести к потере данных. Хотя и в финальных версиях таких гарантий разработчики, как правило, не дают.

Кроме программного и аппаратного обеспечения понятие бета-версия в последнее время часто применяется к сайтам, либо к их определённым разделам или функциям. 
При этом в большинстве случаев бета-тестирование является открытым, а доработки производятся в процессе функционирования сайта.

Бета-тестирование может быть открытым и закрытым, когда программу тестируют только разработчики или пользователи по приглашениям.


15. Что означает пилотное тестирование? (Pilot)

PILOT testing определяется как тип тестирования программного обеспечения, который проверяет компонент системы или всю систему в режиме реального времени. 
Целью пилотного теста является оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между 
UAT и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного 
развертывания системы. Другими словами, это означает проведение генеральной репетиции для последующего теста на удобство использования. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе.

Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и 
регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке
системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается 
для замены старой.


16. Что такое бизнес – логика?

Бизнес-логика — в разработке информационных систем — совокупность правил, принципов, зависимостей поведения объектов предметной области 
(области человеческой деятельности, которую система поддерживает). Иначе можно сказать, что бизнес-логика — это реализация правил и ограничений
автоматизируемых операций. Является синонимом термина «логика предметной области» (англ. domain logic). Бизнес-логика задает правила, которым подчиняются данные
предметной области.


17. Какие существуют основные виды тестирования ПО?
18. Методы тестирования?
19. Что такое пирамида / уровни тестирования?

20. Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)
21. Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)
22. Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)
23. Что подразумевается под интеграционным тестированием?
24. Разница между Unit testing и Integration testing?
25. Что такое системное интеграционное тестирование? (SIT — System Integration testing) 
26. В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)
27. Что подразумевается под системным тестированием?
28. Что такое функциональное тестирование?
29. Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)
30. Что такое тестирование на соответствие? (Conformance/Compilance testing)
31. Что такое нефункциональное тестирование?
32. Что вы знаете о Тестировании удобства пользования?
33. Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)
34. Что такое тестирование интерфейса?
35. Что такое тестирование рабочего процесса/воркфлоу? (Workflow testing)
37. Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
38. Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)

39. Что такое инсталляционное тестирование? (Installation Testing)

Тестирование инсталляции — под инсталляционным тестированием (тестированием установки) подразумевают уровень корректности установки некоего программного продукта 
в искусственно созданной среде с целью выявления степени ее готовности к эксплуатации.

Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления программного обеспечения.

Данный вид тестирования используется для проверки установки приложений и программ, как десктопных, так и мобильных.

40. Что вы знаете о тестировании безопасности?
41. Что такое конфигурационное тестирование?
42. Объясните, что такое тестирование N+1
43. Что вы знаете о тестировании сборки? (Build Verification Test)
44. Что такое тестирование потоков? (Thread testing)
45. Что вы знаете о мутационном тестировании? (Mutation testing)
46. Что вы знаете о мутационном тестировании? (Mutation testing)
47. В чем разница между Baseline и Benchmark testing?
48. Что такое A/B тестирование?
49. Что означает сквозное тестирование? (E2E — End–to–End)
50. В чем разница между E2E и системным тестированием?
51. Что такое параллельное тестирование? (Parallel testing)
52. Чем AdHock тестирование отличается от Исследовательского тестирования?










